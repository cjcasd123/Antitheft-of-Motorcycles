C51 COMPILER V9.54   MAIN                                                                  09/26/2019 21:33:20 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil5 mdk\C51\BIN\C51.EXE user\src\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\lib;.\user\inc) DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc8.h"
   2          #include "config.h"
   3          #include "event.h"
   4          #include "uart.h"
   5          #include <intrins.h>
   6          #include <string.h>
   7          #include "watermark.h"
   8          #include "mainproc.h"
   9          
  10          //extern u8 usart1_date,usart2_date;
  11          
  12          
  13          void main(void)
  14          {
  15   1        EVNT_Handle evnt = 0;
  16   1        u8    last_rxd_stat = 0x00;
  17   1        u8    last_rxd_change_cnt = 0x00;
  18   1        /* 正式执行程序 */
  19   1        p_appc_all_init();
  20   1      
  21   1        /* 输出编译日期 */
  22   1        //p_uart1_send_string(__DATE__" "__TIME__" Compiled.");
  23   1      
  24   1        p_delay_10ms(100);
  25   1      
  26   1        while (1)
  27   1        {
  28   2          /* 防止后面的事件没有被询问到 */
  29   2          evnt = evnt >= EVNT_MAX ? 0 : evnt + 1;
  30   2      
  31   2          /* 事件轮询 */
  32   2          for (; evnt < EVNT_MAX; ++evnt)
  33   2          {
  34   3            if (p_envt_get_event(evnt))
  35   3            {
  36   4              p_envt_clear_event(evnt);
  37   4              break;
  38   4            }
  39   3          }
  40   2      
  41   2          /* 事件处理 */
  42   2          switch (evnt)
  43   2          {
  44   3          case EVNT_INIT:
  45   3            break;
  46   3          case EVNT_WATERMARK:
  47   3            p_watermark_ctrl(g_config.m_enbale_sy1, g_config.m_enbale_sy2);
  48   3            if ((g_config.m_enbale_sy1 == 0) && (g_config.m_enbale_sy2 == 0))   // 防止保留上次还有的数据
  49   3            {
  50   4              g_sy1_shark_cnt = 0;
  51   4              g_sy2_shark_cnt = 0;
  52   4            }
  53   3            evnt = 0;
  54   3            break;
C51 COMPILER V9.54   MAIN                                                                  09/26/2019 21:33:20 PAGE 2   

  55   3          case EVNT_SLEEP:
  56   3            /* 睡眠任务 */
  57   3            p_uart1_send_string("OK2");
  58   3            p_delay_10ms(100);
  59   3            p_appc_task_sleep_proc(); // 睡醒后进行发送一次数据
  60   3            p_uart1_send_string("OK3");
  61   3            evnt = 0;                 // 这个一定要清0
  62   3            break;
  63   3      
  64   3          default:
  65   3            break;
  66   3          }
  67   2      
  68   2          /* 串口1接收处理与Air相连接 */
  69   2          if (COM1.RX_TimeOut
  70   2            && COM1.RX_TimeOut <= TimeOutSet2)
  71   2          {
  72   3            /* 防止在没有接收到数据的时候，重复进入处理函数 */
  73   3            COM1.RX_TimeOut = 0;
  74   3            /* 处理串口数据（解析来自GSM的数据） */
  75   3            p_proc_data_parser_from_air();
  76   3            memset(RX1_Buffer, 0, COM1.RX_Cnt);
  77   3            COM1.RX_Cnt = 0;
  78   3          }
  79   2      
  80   2          /* 串口2接收处理与wifi相连接 */
  81   2          if (COM2.RX_TimeOut
  82   2            && COM2.RX_TimeOut <= TimeOutSet2)
  83   2          {
  84   3            /* 防止在没有接收到数据的时候，重复进入处理函数 */
  85   3            COM2.RX_TimeOut = 0;
  86   3            /* 处理串口数据(打包WIFI数据和MCU自身数据) */
  87   3            p_proc_data_parser_from_loRa();
  88   3            memset(RX2_Buffer, 0, COM2.RX_Cnt + 1);
  89   3            COM2.RX_Cnt = 0;
  90   3            //p_uart2_send_string("OK2");
  91   3          }
  92   2      #if 0
                  /* 定时发送数据包到GSM */
                  if (g_heart_sign == heart_send)
                  {
                    p_proc_data_parser_from_loRa();
                    memset(RX2_Buffer, 0, COM2.RX_Cnt + 1);
                    COM2.RX_Cnt = 0;
                    g_heart_sign = heart_clear;
                  }
              #endif
 102   2      #if 0
                  /* 再进行建立一个无串口2返回数值时接收MCU的数据（加一个协议进去或者加个定时器） */
                  if (usart1_date == 1)
                  {
                    /* 处理串口数据 */
                    p_proc_data_parser_from_loRa();
                    //p_uart1_send_string("OK1");
                    usart1_date = 0;
                  }
              
                  /* 建立一个烧写固件的转发 */
                  // 判断是否要进入下载模式（这个就是转换到WIFI的固件）目前是直接IO口数据转换就行（串1RX--串2RX）   
                  //但是满足的条件的含义未知？？
                  if (IAP_RXD == last_rxd_stat)
                  {
C51 COMPILER V9.54   MAIN                                                                  09/26/2019 21:33:20 PAGE 3   

                    last_rxd_stat = IAP_RXD;
                    if (last_rxd_change_cnt++ > 10)
                    {
                      //EA = 0;
                      disableInterrupts();
                      WIFI_RST = 0;
                      WIFI_SET = 0;
                      WIFI_PU = 0;
                      Delay1000ms();
                      WIFI_PU = 1;
                      WIFI_RST = 1;
              
                      while (1)
                      {
                        WIFI_RXD = IAP_RXD;
                        IAP_TXD = WIFI_TXD;
                      }
                    }
                  }
              #endif
 137   2      
 138   2        }
 139   1      }
 140          
 141          
 142          /*
 143          
 144          void Delay1000ms()    //@12.000MHz
 145          {
 146            unsigned char i, j, k;
 147          
 148            _nop_();
 149            _nop_();
 150            i = 61;
 151            j = 225;
 152            k = 62;
 153            do
 154            {
 155              do
 156              {
 157                while (--k);
 158              } while (--j);
 159            } while (--i);
 160          }
 161          
 162          */
 163          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    313    ----
   CONSTANT SIZE    =      8    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
